name: Build full repo data

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch and format full GitHub repo metadata
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const slim = [];
            const repos = await github.rest.repos.listForUser({
              username: 'SmitedReal',
              per_page: 100
            });

            for (const r of repos.data) {
              try {
                const [tags, releases, readme, commits] = await Promise.all([
                  github.rest.repos.listTags({ owner: 'SmitedReal', repo: r.name }),
                  github.rest.repos.listReleases({ owner: 'SmitedReal', repo: r.name }),
                  github.rest.repos.getReadme({ owner: 'SmitedReal', repo: r.name }).catch(() => null),
                  github.rest.repos.listCommits({ owner: 'SmitedReal', repo: r.name, per_page: 1 })
                ]);

                slim.push({
                  name: r.name,
                  description: r.description,
                  html_url: r.html_url,
                  archived: r.archived,
                  stargazers_count: r.stargazers_count,
                  forks_count: r.forks_count,
                  commit_count: r.size || null, // fallback estimate
                  release_count: releases.data.length,
                  latest_release: releases.data[0]?.name || releases.data[0]?.tag_name || null,
                  latest_tag: tags.data[0]?.name || null,
                  has_readme: !!readme
                });
              } catch (err) {
                console.log(`Error fetching metadata for ${r.name}: ${err.message}`);
              }
            }

            core.setOutput("formatted", JSON.stringify(slim, null, 2));
        id: getRepos

      - name: Save repos.json file
        run: |
          echo '${{ steps.getRepos.outputs.formatted }}' > public/repos.json

      - name: Commit and push updated JSON
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/repos.json
          git commit -m "chore: update repos.json" || echo "No changes to commit"
          git push
